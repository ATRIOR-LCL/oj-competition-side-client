
name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Linux (AppImage and deb)
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  publish-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Windows
        run: npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  publish-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish macOS
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  cleanup-release:
    runs-on: ubuntu-latest
    needs: [publish-linux, publish-windows, publish-macos]
    if: always() && (needs.publish-linux.result == 'success' || needs.publish-windows.result == 'success' || needs.publish-macos.result == 'success')
    permissions:
      contents: write
      actions: read
    steps:
      - name: Debug GitHub token and permissions
        run: |
          echo "üîç Debugging GitHub environment..."
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Token exists: ${{ secrets.atriordsa != '' }}"
          echo "Token length: ${#GITHUB_TOKEN}"
          
          # Â∞ùËØï‰∏çÂêåÁöÑ API Ë∞ÉÁî®
          echo "üß™ Testing different API endpoints..."
          
          # ÊµãËØïÂü∫Êú¨Áî®Êà∑‰ø°ÊÅØ
          echo "Testing /user endpoint:"
          curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | jq -r '.login // "Failed"' || echo "curl failed"
          
          # ÊµãËØï‰ªìÂ∫ì‰ø°ÊÅØ
          echo "Testing repository endpoint:"
          curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }} | jq -r '.name // "Failed"' || echo "curl failed"
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
      
      - name: Clean unwanted files from release
        run: |
          set -e  # ÂêØÁî®ÈîôËØØÊó∂ÈÄÄÂá∫
          
          echo "üßπ Starting release cleanup for tag: ${{ github.ref_name }}"
          
          # Áõ¥Êé•‰ΩøÁî® curl ËÄå‰∏çÊòØ gh CLIÔºåÂõ†‰∏∫ gh CLI ÂèØËÉΩÊúâÊùÉÈôêÈóÆÈ¢ò
          echo "üîó Testing GitHub API with curl..."
          
          # È™åËØÅÁéØÂ¢ÉÂèòÈáè
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN not set"
            exit 1
          fi
          
          # ÊµãËØï API ËøûÊé•
          USER_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user)
          if ! echo "$USER_RESPONSE" | jq -e '.login' > /dev/null 2>&1; then
            echo "‚ùå Cannot authenticate with GitHub API"
            echo "Response: $USER_RESPONSE"
            exit 1
          fi
          echo "‚úÖ GitHub API authentication successful"
          
          # Á≠âÂæÖÁ°Æ‰øùÊâÄÊúâ‰∏ä‰º†ÂÆåÊàê
          echo "‚è∞ Waiting 30 seconds for uploads to complete..."
          sleep 30
          
          echo "üì° Getting release for tag: ${{ github.ref_name }}"
          
          # È¶ñÂÖàÂ∞ùËØïÈÄöËøáÊ†áÁ≠æËé∑Âèñ releaseÔºåÂ¶ÇÊûúÂ§±Ë¥•Âàô‰ªéÊâÄÊúâ releases ‰∏≠Êü•Êâæ
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          
          # Â¶ÇÊûúÁõ¥Êé•ÈÄöËøáÊ†áÁ≠æËé∑ÂèñÂ§±Ë¥•ÔºåÂàô‰ªéÊâÄÊúâ releases ‰∏≠Êü•Êâæ
          if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  Direct tag lookup failed, searching in all releases..."
            echo "Direct response: $RELEASE_RESPONSE"
            
            ALL_RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            RELEASE_RESPONSE=$(echo "$ALL_RELEASES" | jq ".[] | select(.tag_name == \"${{ github.ref_name }}\")")
            
            if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "‚ùå Could not find release for tag ${{ github.ref_name }}"
              echo "Available releases:"
              echo "$ALL_RELEASES" | jq -r '.[] | "- \(.tag_name) (ID: \(.id))"' | head -10
              exit 1
            fi
          fi
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          echo "‚úÖ Found release ID: $RELEASE_ID"
          
          # Ëé∑Âèñ assets
          echo "üìÅ Getting release assets..."
          ASSETS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets)
          
          if ! echo "$ASSETS_RESPONSE" | jq -e '. | length' > /dev/null 2>&1; then
            echo "‚ùå Failed to get assets"
            echo "Response: $ASSETS_RESPONSE"
            exit 1
          fi
          
          echo "üìÅ Current release assets:"
          echo "$ASSETS_RESPONSE" | jq -r '.[] | "- \(.name) (ID: \(.id))"'
          
          # Êü•ÊâæÂπ∂Âà†Èô§‰∏çÈúÄË¶ÅÁöÑÊñá‰ª∂
          echo "üîç Looking for unwanted assets..."
          
          # Âà†Èô§ .yml, .yaml, .blockmap Êñá‰ª∂
          echo "Finding .yml, .yaml, .blockmap files..."
          YML_ASSETS=$(echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | .id else empty end' 2>/dev/null || echo "")
          
          # Âà†Èô§‰∏çÂ∏¶Êû∂ÊûÑÊ†áËØÜÁöÑ Windows Êñá‰ª∂  
          echo "Finding Windows files without architecture identifiers..."
          WINDOWS_NO_ARCH_ASSETS=$(echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select(.name | test("windows.*\\.(exe)$") and (.name | test("_(x64|arm64)_") | not)) | .id else empty end' 2>/dev/null || echo "")
          
          # ÂêàÂπ∂ÊâÄÊúâË¶ÅÂà†Èô§ÁöÑ assetsÔºåËøáÊª§Á©∫Ë°å
          ALL_UNWANTED_ASSETS=""
          if [ -n "$YML_ASSETS" ]; then
            ALL_UNWANTED_ASSETS="$YML_ASSETS"
          fi
          if [ -n "$WINDOWS_NO_ARCH_ASSETS" ]; then
            if [ -n "$ALL_UNWANTED_ASSETS" ]; then
              ALL_UNWANTED_ASSETS="$ALL_UNWANTED_ASSETS\n$WINDOWS_NO_ARCH_ASSETS"
            else
              ALL_UNWANTED_ASSETS="$WINDOWS_NO_ARCH_ASSETS"
            fi
          fi
          
          if [ -n "$ALL_UNWANTED_ASSETS" ]; then
            echo "üéØ Found unwanted assets to delete:"
            
            # ÊòæÁ§∫Ë¶ÅÂà†Èô§ÁöÑÊñá‰ª∂ÂàóË°®
            echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select((.name | test("\\.(yml|yaml|blockmap)$")) or (.name | test("windows.*\\.(exe)$") and (.name | test("_(x64|arm64)_") | not))) | "- \(.name) (ID: \(.id))" else empty end' 2>/dev/null || echo "Error displaying file list"
            
            echo -e "$ALL_UNWANTED_ASSETS" | while read -r asset_id; do
              if [ -n "$asset_id" ] && [ "$asset_id" != "null" ] && [ "$asset_id" != "" ]; then
                ASSET_NAME=$(echo "$ASSETS_RESPONSE" | jq -r "if type == \"array\" then .[] | select(.id == $asset_id) | .name else \"unknown\" end" 2>/dev/null)
                echo "üóëÔ∏è  Deleting: $ASSET_NAME (ID: $asset_id)"
                
                DELETE_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -X DELETE \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id)
                
                if [ "$DELETE_RESPONSE" = "204" ]; then
                  echo "‚úÖ Successfully deleted: $ASSET_NAME"
                else
                  echo "‚ùå Failed to delete: $ASSET_NAME (HTTP: $DELETE_RESPONSE)"
                fi
              fi
            done
          else
            echo "üéâ No unwanted files found!"
          fi
          
          echo "üèÅ Cleanup completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}

  upload-to-cos:
    runs-on: ubuntu-latest
    needs: [cleanup-release]
    if: always() && needs.cleanup-release.result == 'success'
    steps:
      - name: Get release info
        id: release
        run: |
          set -e
          
          echo "üîç Getting release info for tag: ${{ github.ref_name }}"
          
          # È™åËØÅÁéØÂ¢ÉÂèòÈáè
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN not set"
            exit 1
          fi
          
          # Á≠âÂæÖÁ°Æ‰øù cleanup ÂÆåÊàê
          echo "‚è∞ Waiting 15 seconds for cleanup to complete..."
          sleep 15
          
          # È¶ñÂÖàÂ∞ùËØïÈÄöËøáÊ†áÁ≠æËé∑Âèñ releaseÔºà‰∏é cleanup-release Áõ∏ÂêåÁöÑÊñπÊ≥ïÔºâ
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          
          # Â¶ÇÊûúÁõ¥Êé•ÈÄöËøáÊ†áÁ≠æËé∑ÂèñÂ§±Ë¥•ÔºåÂàô‰ªéÊâÄÊúâ releases ‰∏≠Êü•Êâæ
          if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  Direct tag lookup failed, searching in all releases..."
            echo "Direct response: $RELEASE_RESPONSE"
            
            ALL_RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            RELEASE_RESPONSE=$(echo "$ALL_RELEASES" | jq ".[] | select(.tag_name == \"${{ github.ref_name }}\")")
            
            if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "‚ùå Could not find release for tag ${{ github.ref_name }}"
              echo "Available releases:"
              echo "$ALL_RELEASES" | jq -r '.[] | "- \(.tag_name) (ID: \(.id))"' | head -10
              exit 1
            fi
          fi
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          TAG_NAME=$(echo "$RELEASE_RESPONSE" | jq -r '.tag_name')
          ASSETS=$(echo "$RELEASE_RESPONSE" | jq -c '.assets')
          
          echo "‚úÖ Found release: $TAG_NAME (ID: $RELEASE_ID)"
          echo "üì¶ Assets count: $(echo "$ASSETS" | jq length)"
          
          # ËæìÂá∫Âà∞ GitHub Actions outputs
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "assets<<EOF" >> $GITHUB_OUTPUT
          echo "$ASSETS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Release info prepared for COS upload"
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}

      - name: Download release assets
        id: download
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
        run: |
          echo "üì• Starting download of release assets..."
          
          # È™åËØÅÁéØÂ¢ÉÂèòÈáè
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN not set"
            exit 1
          fi
          
          # ÂàõÂª∫‰∏ãËΩΩÁõÆÂΩï
          mkdir -p ./downloads
          cd ./downloads
          
          # Ëß£Êûê assets JSON
          echo '${{ steps.release.outputs.assets }}' > assets.json
          
          # Ê£ÄÊü•ÊòØÂê¶Êúâassets
          ASSET_COUNT=$(jq 'length' assets.json)
          echo "üì¶ Found $ASSET_COUNT assets to download"
          
          if [ "$ASSET_COUNT" -eq 0 ]; then
            echo "‚ùå No assets found to download"
            exit 1
          fi
          
          # Áõ¥Êé•‰ªétagged releaseÊûÑÂª∫Ê≠£Á°ÆÁöÑURL
          TAG_NAME="${{ steps.release.outputs.tag_name }}"
          REPO="${{ github.repository }}"
          
          # ‰ΩøÁî® jq Â§ÑÁêÜÊØè‰∏™ assetÔºå‰ΩÜÊûÑÂª∫Ê≠£Á°ÆÁöÑURL
          jq -r '.[] | .name' assets.json | while read -r name; do
            echo "üì• Downloading: $name"
            
            # ÊûÑÂª∫Ê≠£Á°ÆÁöÑ‰∏ãËΩΩURLÔºà‰ΩøÁî®tagËÄå‰∏çÊòØuntaggedÔºâ
            CORRECT_URL="https://github.com/${REPO}/releases/download/${TAG_NAME}/${name}"
            echo "   URL: $CORRECT_URL"
            
            # ‰∏ãËΩΩÊñá‰ª∂Ôºå‰ΩøÁî®ËÆ§ËØÅÂíåÊõ¥ËØ¶ÁªÜÁöÑÈîôËØØÂ§ÑÁêÜ
            if curl -L -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Accept: application/octet-stream" \
                   --fail --show-error --silent \
                   --connect-timeout 30 \
                   --max-time 300 \
                   -o "$name" "$CORRECT_URL"; then
              echo "‚úÖ Downloaded: $name ($(du -h "$name" | cut -f1))"
              
              # È™åËØÅÊñá‰ª∂‰∏ç‰∏∫Á©∫
              if [ ! -s "$name" ]; then
                echo "‚ùå Downloaded file is empty: $name"
                exit 1
              fi
            else
              echo "‚ùå Failed to download: $name"
              echo "‚ùå curl exit code: $?"
              # Â∞ùËØïÊó†ËÆ§ËØÅ‰∏ãËΩΩÔºàÂØπ‰∫éÂÖ¨ÂºÄÊñá‰ª∂Ôºâ
              echo "üîÑ Trying without authentication..."
              if curl -L --fail --show-error --silent \
                     --connect-timeout 30 \
                     --max-time 300 \
                     -o "$name" "$CORRECT_URL"; then
                echo "‚úÖ Downloaded without auth: $name ($(du -h "$name" | cut -f1))"
              else
                echo "‚ùå Failed even without authentication"
                echo "‚ùå Trying alternative URL construction..."
                
                # ÊúÄÂêéÂ∞ùËØïÔºö‰ΩøÁî®GitHub API‰∏ãËΩΩ
                ASSET_ID=$(echo '${{ steps.release.outputs.assets }}' | jq -r ".[] | select(.name == \"$name\") | .id")
                if [ -n "$ASSET_ID" ] && [ "$ASSET_ID" != "null" ]; then
                  echo "üîÑ Trying GitHub API download (Asset ID: $ASSET_ID)..."
                  if curl -L -H "Authorization: token $GITHUB_TOKEN" \
                         -H "Accept: application/octet-stream" \
                         --fail --show-error --silent \
                         --connect-timeout 30 \
                         --max-time 300 \
                         -o "$name" \
                         "https://api.github.com/repos/${REPO}/releases/assets/${ASSET_ID}"; then
                    echo "‚úÖ Downloaded via API: $name ($(du -h "$name" | cut -f1))"
                  else
                    echo "‚ùå API download also failed"
                    exit 1
                  fi
                else
                  echo "‚ùå Could not find asset ID"
                  exit 1
                fi
              fi
            fi
          done
          
          echo "üìÑ Downloaded files:"
          ls -la

      - name: Setup and Upload to Tencent Cloud COS
        run: |
          echo "üîß Setting up Tencent Cloud COS CLI..."
          
          # ÂÆâË£Ö COS CLI - ‰ΩøÁî®Êõ¥Á®≥ÂÆöÁöÑÊñπÂºè
          if ! command -v coscli &> /dev/null; then
            echo "Installing COS CLI..."
            
            # Ëé∑ÂèñÊúÄÊñ∞ÁâàÊú¨ÁöÑ‰∏ãËΩΩÈìæÊé•
            LATEST_VERSION=$(curl -s https://api.github.com/repos/tencentyun/coscli/releases/latest | jq -r '.tag_name')
            echo "Latest COS CLI version: $LATEST_VERSION"
            
            # ‰∏ãËΩΩÂπ∂ÂÆâË£Ö
            wget -q "https://github.com/tencentyun/coscli/releases/download/${LATEST_VERSION}/coscli-linux" -O coscli
            
            # Ê£ÄÊü•‰∏ãËΩΩÊòØÂê¶ÊàêÂäü
            if [ ! -f "coscli" ]; then
              echo "‚ùå Failed to download COS CLI"
              exit 1
            fi
            
            chmod +x coscli
            
            # Â∞ùËØïÁßªÂä®Âà∞Á≥ªÁªüË∑ØÂæÑÔºåÂ¶ÇÊûúÂ§±Ë¥•Âàô‰ΩøÁî®Êú¨Âú∞Ë∑ØÂæÑ
            if sudo mv coscli /usr/local/bin/ 2>/dev/null; then
              echo "‚úÖ COS CLI installed to /usr/local/bin/"
              COSCLI_CMD="coscli"
            else
              echo "‚ö†Ô∏è  Could not install globally, using local binary"
              COSCLI_CMD="./coscli"
            fi
          else
            echo "‚úÖ COS CLI already installed"
            COSCLI_CMD="coscli"
          fi
          
          # È™åËØÅ COS CLI Â∑•‰Ωú
          echo "Testing COS CLI..."
          $COSCLI_CMD version || {
            echo "‚ùå COS CLI not working properly"
            exit 1
          }
          
          # ÈÖçÁΩÆ COS CLI
          echo "Configuring COS CLI..."
          $COSCLI_CMD config set -e cos.${{ secrets.COS_REGION }}.myqcloud.com \
                              -i ${{ secrets.COS_SECRET_ID }} \
                              -k ${{ secrets.COS_SECRET_KEY }} \
                              -a ${{ secrets.COS_BUCKET }}
          
          echo "üìÅ Uploading files to COS..."
          echo "Target path: releases/${{ steps.release.outputs.tag_name }}/"
          
          # ÂàõÂª∫ËøúÁ®ãÁõÆÂΩïÂπ∂‰∏ä‰º†ÊâÄÊúâÊñá‰ª∂
          cd ./downloads
          UPLOAD_SUCCESS=true
          
          for file in *; do
            if [ -f "$file" ] && [ "$file" != "assets.json" ]; then
              echo "üì§ Uploading: $file"
              echo "   Original filename will be preserved: $file"
              
              # ‰ΩøÁî®cpÂëΩ‰ª§Á°Æ‰øùÊñá‰ª∂ÂêçÂÆåÊï¥‰øùÁïô
              if $COSCLI_CMD cp "$file" "cos://${{ secrets.COS_BUCKET }}/releases/${{ steps.release.outputs.tag_name }}/$file"; then
                echo "‚úÖ Successfully uploaded: $file"
                
                # È™åËØÅ‰∏ä‰º†
                if $COSCLI_CMD ls "cos://${{ secrets.COS_BUCKET }}/releases/${{ steps.release.outputs.tag_name }}/$file" &>/dev/null; then
                  echo "‚úÖ Verified upload: $file"
                else
                  echo "‚ö†Ô∏è  Warning: Could not verify upload of $file"
                fi
              else
                echo "‚ùå Failed to upload: $file"
                UPLOAD_SUCCESS=false
              fi
            fi
          done
          
          if [ "$UPLOAD_SUCCESS" = true ]; then
            echo "‚úÖ All files uploaded to COS successfully with original filenames"
          else
            echo "‚ùå Some uploads failed"
            exit 1
          fi

      - name: Create release index
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.atriordsa }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const tagName = '${{ steps.release.outputs.tag_name }}';
            const cdnUrl = '${{ secrets.CDN_URL }}';
            const versionPath = `releases/${tagName}`;
            
            console.log('üìã Creating release index...');
            
            // ËØªÂèñ‰∏ãËΩΩÁöÑÊñá‰ª∂‰ø°ÊÅØ
            const downloadDir = './downloads';
            const files = [];
            
            if (fs.existsSync(downloadDir)) {
              const fileList = fs.readdirSync(downloadDir);
              
              for (const fileName of fileList) {
                if (fileName !== 'assets.json') {
                  const filePath = path.join(downloadDir, fileName);
                  const stats = fs.statSync(filePath);
                  
                  const safeKey = `${versionPath}/${fileName}`.replace(/ /g, '_');
                  const cdnFileUrl = `${cdnUrl.replace(/\/$/, '')}/${safeKey}`;
                  
                  files.push({
                    name: fileName,
                    cos_key: safeKey,
                    cdn_url: cdnFileUrl,
                    size: stats.size
                  });
                  
                  console.log(`üìÑ ${fileName} -> ${cdnFileUrl}`);
                }
              }
            }
            
            // ÂàõÂª∫Á¥¢ÂºïÊï∞ÊçÆ
            const indexData = {
              version: tagName,
              upload_time: Math.floor(Date.now() / 1000),
              files: files,
              total_files: files.length,
              repository: context.repo.owner + '/' + context.repo.repo
            };
            
            // ‰øùÂ≠òÁ¥¢ÂºïÊñá‰ª∂
            const indexFile = path.join(downloadDir, 'index.json');
            fs.writeFileSync(indexFile, JSON.stringify(indexData, null, 2));
            
            console.log(`‚úÖ Created index with ${files.length} files`);
            console.log(`üìÅ Version directory: ${cdnUrl.replace(/\/$/, '')}/${versionPath}/`);

      - name: Upload index to COS using CLI
        run: |
          echo "üì§ Uploading index.json to COS..."
          
          # Á°ÆÂÆöCOS CLIÂëΩ‰ª§Ë∑ØÂæÑ
          if command -v coscli &> /dev/null; then
            COSCLI_CMD="coscli"
          elif [ -f "./coscli" ]; then
            COSCLI_CMD="./coscli"
          else
            echo "‚ùå COS CLI not found"
            exit 1
          fi
          
          cd ./downloads
          if [ -f "index.json" ]; then
            echo "üìã Uploading index file..."
            
            if $COSCLI_CMD cp "index.json" "cos://${{ secrets.COS_BUCKET }}/releases/${{ steps.release.outputs.tag_name }}/index.json"; then
              echo "‚úÖ Successfully uploaded index.json"
              
              # È™åËØÅ‰∏ä‰º†
              if $COSCLI_CMD ls "cos://${{ secrets.COS_BUCKET }}/releases/${{ steps.release.outputs.tag_name }}/index.json" &>/dev/null; then
                echo "‚úÖ Verified index.json upload"
              else
                echo "‚ö†Ô∏è  Warning: Could not verify index.json upload"
              fi
            else
              echo "‚ùå Failed to upload index.json"
              exit 1
            fi
          else
            echo "‚ùå index.json not found"
            ls -la
            exit 1
          fi

      - name: Display upload summary
        run: |
          echo "üéâ COS upload completed successfully!"
          echo "üìÅ Version: ${{ steps.release.outputs.tag_name }}"
          echo "üåê CDN Base URL: ${{ secrets.CDN_URL }}"
          echo "üìÇ Release Directory: ${{ secrets.CDN_URL }}/releases/${{ steps.release.outputs.tag_name }}/"
          echo "üìã Index File: ${{ secrets.CDN_URL }}/releases/${{ steps.release.outputs.tag_name }}/index.json"
