
name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Linux (AppImage and deb)
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

  publish-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Windows
        run: npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

  publish-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish macOS
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

  cleanup-release:
    runs-on: ubuntu-latest
    needs: [publish-linux, publish-windows, publish-macos]
    if: always() && (needs.publish-linux.result == 'success' || needs.publish-windows.result == 'success' || needs.publish-macos.result == 'success')
    steps:
      - name: Clean unwanted files from release
        run: |
          echo "🧹 Starting release cleanup for tag: ${{ github.ref_name }}"
          
          # 等待确保所有上传完成
          sleep 20
          
          # 获取 release ID
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.id' 2>/dev/null)
          
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "❌ Could not find release for tag ${{ github.ref_name }}"
            exit 0
          fi
          
          echo "✅ Found release ID: $RELEASE_ID"
          
          # 列出所有 assets
          echo "📁 Current release assets:"
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq '.[] | "- \(.name) (ID: \(.id))"'
          
          # 查找并删除不需要的文件
          UNWANTED_ASSETS=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq '.[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | .id')
          
          if [ -n "$UNWANTED_ASSETS" ]; then
            echo "🎯 Found unwanted assets to delete:"
            gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq '.[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | "- \(.name) (ID: \(.id))"'
            
            echo "$UNWANTED_ASSETS" | while read -r asset_id; do
              if [ -n "$asset_id" ] && [ "$asset_id" != "null" ]; then
                ASSET_NAME=$(gh api repos/${{ github.repository }}/releases/assets/$asset_id --jq '.name' 2>/dev/null)
                echo "🗑️  Deleting: $ASSET_NAME (ID: $asset_id)"
                
                if gh api --method DELETE repos/${{ github.repository }}/releases/assets/$asset_id; then
                  echo "✅ Successfully deleted: $ASSET_NAME"
                else
                  echo "❌ Failed to delete: $ASSET_NAME"
                fi
              fi
            done
          else
            echo "🎉 No unwanted files found!"
          fi
          
          echo "🏁 Cleanup completed!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
