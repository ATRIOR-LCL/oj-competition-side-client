name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:
  publish-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          chmod +x ./bin/debug-env.sh
          ./bin/debug-env.sh

      - name: Publish Linux (AppImage and deb)
        run: |
          echo "üêß ÂºÄÂßãLinuxÊûÑÂª∫..."
          npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

      - name: Verify Linux build output
        run: |
          echo "üîç È™åËØÅLinuxÊûÑÂª∫ËæìÂá∫..."
          ls -la dist/
          echo "‚úÖ LinuxÊûÑÂª∫ÂÆåÊàê"

  publish-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          chmod +x ./bin/debug-env.sh
          ./bin/debug-env.sh

      - name: Publish Windows
        run: |
          echo "ü™ü ÂºÄÂßãWindowsÊûÑÂª∫ÔºàÂåÖÂê´DefenderÁôΩÂêçÂçïËá™Âä®ÈÖçÁΩÆÔºâ..."
          npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

      - name: Verify Windows build output
        run: |
          echo "üîç È™åËØÅWindowsÊûÑÂª∫ËæìÂá∫..."
          ls -la dist/
          # Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´READMEÊñá‰ª∂ÂíåÂÆâË£ÖËÑöÊú¨
          if (Test-Path "dist/README_WINDOWS.txt") {
            Write-Host "‚úÖ WindowsÁî®Êà∑ËØ¥ÊòéÊñá‰ª∂Â∑≤ÂàõÂª∫"
            Get-Content "dist/README_WINDOWS.txt"
          } else {
            Write-Host "‚ö†Ô∏è  WindowsÁî®Êà∑ËØ¥ÊòéÊñá‰ª∂Êú™ÊâæÂà∞"
          }
          # Ê£ÄÊü•NSISÈÖçÁΩÆ
          if (Test-Path "build/installer.nsh") {
            Write-Host "‚úÖ NSISÂÆâË£ÖËÑöÊú¨ÈÖçÁΩÆÂ≠òÂú®"
          } else {
            Write-Host "‚ö†Ô∏è  NSISÂÆâË£ÖËÑöÊú¨ÈÖçÁΩÆÊú™ÊâæÂà∞"
          }
        shell: powershell

  publish-macos:
    runs-on: macos-latest
    timeout-minutes: 60
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          chmod +x ./bin/debug-env.sh
          ./bin/debug-env.sh

      - name: Debug macOS build environment
        run: |
          echo "=== macOS Build Environment (${{ matrix.arch }}) ==="
          uname -a
          sw_vers
          xcodebuild -version || echo "Xcode not available"
          echo "Available disk space:"
          df -h
          echo "Memory usage:"
          vm_stat
          echo "Building for architecture: ${{ matrix.arch }}"

      - name: Setup macOS signing tools
        run: |
          echo "üîß ÂáÜÂ§ámacOSÁ≠æÂêçÂ∑•ÂÖ∑..."
          # Á°Æ‰øùcodesignÂ∑•ÂÖ∑ÂèØÁî®
          which codesign || echo "Warning: codesign not found"
          # ËÆæÁΩÆËÑöÊú¨ÊùÉÈôê
          chmod +x ./bin/fix-macos.sh
          chmod +x ./bin/user-fix-macos.sh
          echo "‚úÖ macOSÂ∑•ÂÖ∑ÂáÜÂ§áÂÆåÊàê"

      - name: Publish macOS ${{ matrix.arch }}
        run: |
          echo "Starting macOS ${{ matrix.arch }} build with verbose output..."
          echo "üçé ÊûÑÂª∫Â∞ÜËá™Âä®Â§ÑÁêÜÁ≠æÂêçÂíåÁî®Êà∑‰ΩìÈ™å‰ºòÂåñ..."
          npm run publish:mac:${{ matrix.arch }}
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder
          CSC_IDENTITY_AUTO_DISCOVERY: false
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          # Á°Æ‰øùafterPackÈí©Â≠êËÉΩÊ≠£Â∏∏ÊâßË°å
          ELECTRON_IS_DEV: 0

      - name: Verify macOS build output
        run: |
          echo "üîç È™åËØÅmacOSÊûÑÂª∫ËæìÂá∫..."
          ls -la dist/
          # Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´READMEÊñá‰ª∂
          if [ -f "dist/README_MACOS.txt" ]; then
            echo "‚úÖ Áî®Êà∑ËØ¥ÊòéÊñá‰ª∂Â∑≤ÂàõÂª∫"
            cat dist/README_MACOS.txt
          else
            echo "‚ö†Ô∏è  Áî®Êà∑ËØ¥ÊòéÊñá‰ª∂Êú™ÊâæÂà∞"
          fi
          # Ê£ÄÊü•.appÊñá‰ª∂
          find dist/ -name "*.app" -type d | head -5 | while read app_path; do
            if [ -d "$app_path" ]; then
              echo "üì± ÊâæÂà∞Â∫îÁî®: $app_path"
              # Ê£ÄÊü•Á≠æÂêçÁä∂ÊÄÅ
              codesign -dv "$app_path" 2>&1 || echo "Á≠æÂêçÊ£ÄÊü•ÂÆåÊàê"
            fi
          done

  cleanup-release:
    runs-on: ubuntu-latest
    needs: [publish-linux, publish-windows, publish-macos]
    if: always() && (needs.publish-linux.result == 'success' || needs.publish-windows.result == 'success' || needs.publish-macos.result == 'success')
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Debug GitHub token and permissions
        run: |
          chmod +x ./bin/debug-github.sh
          ./bin/debug-github.sh
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
      
      - name: Clean unwanted files from release
        run: |
          chmod +x ./bin/cleanup-release.sh
          ./bin/cleanup-release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}

  upload-to-cos:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3Â∞èÊó∂Ë∂ÖÊó∂ÔºåÈÄÇÂêàÂ§ßÊñá‰ª∂‰∏ä‰º†
    needs: [cleanup-release]
    if: always() && needs.cleanup-release.result == 'success'
    steps:
      - name: Checkout repository first
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get release info
        run: |
          chmod +x ./bin/get-release-info.sh
          ./bin/get-release-info.sh
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Download release assets
        run: |
          chmod +x ./bin/download-assets.sh
          ./bin/download-assets.sh
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create release index
        run: node scripts/create-release-index.js
        env:
          TAG_NAME: ${{ github.ref_name }}
          CDN_URL: ${{ secrets.CDN_URL }}
          GITHUB_TOKEN: ${{ secrets.atriordsa }}

      - name: Upload all files to COS using npm script
        run: npm run upload:cos
        env:
          COS_SECRET_ID: ${{ secrets.COS_SECRET_ID }}
          COS_SECRET_KEY: ${{ secrets.COS_SECRET_KEY }}
          COS_REGION: ${{ secrets.COS_REGION }}
          COS_BUCKET: ${{ secrets.COS_BUCKET }}
          COS_DOMAIN: ${{ secrets.COS_DOMAIN }}
          TAG_NAME: ${{ github.ref_name }}

      - name: Display upload summary
        run: |
          chmod +x ./bin/display-upload-summary.sh
          ./bin/display-upload-summary.sh
        env:
          TAG_NAME: ${{ github.ref_name }}
          COS_DOMAIN: ${{ secrets.COS_DOMAIN }}
          CDN_URL: ${{ secrets.CDN_URL }}
