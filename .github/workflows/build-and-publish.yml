
name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Linux (AppImage and deb)
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Clean up unwanted release assets
        if: success()
        run: |
          sleep 10  # 等待发布完成
          
          # 删除不需要的文件
          TAG_NAME="${{ github.ref_name }}"
          echo "Cleaning up release assets for tag: $TAG_NAME"
          
          # 使用 GitHub API 获取 release 信息并删除不需要的 assets
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id')
          echo "Release ID: $RELEASE_ID"
          
          # 获取所有 assets 并过滤需要删除的文件
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets --jq '.[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | {id: .id, name: .name}' | while read -r line; do
            if [ -n "$line" ]; then
              ASSET_ID=$(echo "$line" | jq -r '.id')
              ASSET_NAME=$(echo "$line" | jq -r '.name')
              echo "Deleting asset: $ASSET_NAME (ID: $ASSET_ID)"
              gh api --method DELETE repos/${{ github.repository }}/releases/assets/$ASSET_ID || echo "Failed to delete $ASSET_NAME"
            fi
          done
          
          echo "Cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Windows
        run: npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

  publish-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish macOS
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

  cleanup-release:
    runs-on: ubuntu-latest
    needs: [publish-linux, publish-windows, publish-macos]
    if: always() && (needs.publish-linux.result == 'success' || needs.publish-windows.result == 'success' || needs.publish-macos.result == 'success')
    steps:
      - name: Final cleanup of release assets
        run: |
          echo "Starting final cleanup of release assets"
          TAG_NAME="${{ github.ref_name }}"
          
          # 等待一段时间确保所有发布操作完成
          sleep 30
          
          # 获取 release 信息
          RELEASE_DATA=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME)
          RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
          echo "Release ID: $RELEASE_ID"
          
          # 获取所有需要删除的 assets
          ASSETS_TO_DELETE=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | .id')
          
          if [ -n "$ASSETS_TO_DELETE" ]; then
            echo "Found assets to delete:"
            echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | "- \(.name) (ID: \(.id))"'
            
            # 逐个删除
            echo "$ASSETS_TO_DELETE" | while read -r asset_id; do
              if [ -n "$asset_id" ]; then
                ASSET_NAME=$(echo "$RELEASE_DATA" | jq -r ".assets[] | select(.id == $asset_id) | .name")
                echo "Deleting asset: $ASSET_NAME (ID: $asset_id)"
                gh api --method DELETE repos/${{ github.repository }}/releases/assets/$asset_id && echo "✅ Deleted $ASSET_NAME" || echo "❌ Failed to delete $ASSET_NAME"
              fi
            done
          else
            echo "No .yml, .yaml, or .blockmap files found in release"
          fi
          
          echo "Final cleanup completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
