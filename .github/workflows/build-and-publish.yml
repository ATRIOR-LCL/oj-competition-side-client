
name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  publish-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Linux (AppImage and deb)
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  publish-windows:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish Windows
        run: npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  publish-macos:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Debug environment
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Tag name: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Is tag push: ${{ startsWith(github.ref, 'refs/tags/') }}"
          echo "GITHUB_TOKEN exists: ${{ secrets.GITHUB_TOKEN != '' }}"
          node --version
          npm --version

      - name: Publish macOS
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.atriordsa }}
          DEBUG: electron-builder

  cleanup-release:
    runs-on: ubuntu-latest
    needs: [publish-linux, publish-windows, publish-macos]
    if: always() && (needs.publish-linux.result == 'success' || needs.publish-windows.result == 'success' || needs.publish-macos.result == 'success')
    permissions:
      contents: write
      actions: read
    steps:
      - name: Debug GitHub token and permissions
        run: |
          echo "üîç Debugging GitHub environment..."
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Token exists: ${{ secrets.atriordsa != '' }}"
          echo "Token length: ${#GITHUB_TOKEN}"
          
          # Â∞ùËØï‰∏çÂêåÁöÑ API Ë∞ÉÁî®
          echo "üß™ Testing different API endpoints..."
          
          # ÊµãËØïÂü∫Êú¨Áî®Êà∑‰ø°ÊÅØ
          echo "Testing /user endpoint:"
          curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | jq -r '.login // "Failed"' || echo "curl failed"
          
          # ÊµãËØï‰ªìÂ∫ì‰ø°ÊÅØ
          echo "Testing repository endpoint:"
          curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }} | jq -r '.name // "Failed"' || echo "curl failed"
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
      
      - name: Clean unwanted files from release
        run: |
          set -e  # ÂêØÁî®ÈîôËØØÊó∂ÈÄÄÂá∫
          
          echo "üßπ Starting release cleanup for tag: ${{ github.ref_name }}"
          
          # Áõ¥Êé•‰ΩøÁî® curl ËÄå‰∏çÊòØ gh CLIÔºåÂõ†‰∏∫ gh CLI ÂèØËÉΩÊúâÊùÉÈôêÈóÆÈ¢ò
          echo "üîó Testing GitHub API with curl..."
          
          # È™åËØÅÁéØÂ¢ÉÂèòÈáè
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN not set"
            exit 1
          fi
          
          # ÊµãËØï API ËøûÊé•
          USER_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user)
          if ! echo "$USER_RESPONSE" | jq -e '.login' > /dev/null 2>&1; then
            echo "‚ùå Cannot authenticate with GitHub API"
            echo "Response: $USER_RESPONSE"
            exit 1
          fi
          echo "‚úÖ GitHub API authentication successful"
          
          # Á≠âÂæÖÁ°Æ‰øùÊâÄÊúâ‰∏ä‰º†ÂÆåÊàê
          echo "‚è∞ Waiting 30 seconds for uploads to complete..."
          sleep 30
          
          echo "üì° Getting release for tag: ${{ github.ref_name }}"
          
          # È¶ñÂÖàÂ∞ùËØïÈÄöËøáÊ†áÁ≠æËé∑Âèñ releaseÔºåÂ¶ÇÊûúÂ§±Ë¥•Âàô‰ªéÊâÄÊúâ releases ‰∏≠Êü•Êâæ
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          
          # Â¶ÇÊûúÁõ¥Êé•ÈÄöËøáÊ†áÁ≠æËé∑ÂèñÂ§±Ë¥•ÔºåÂàô‰ªéÊâÄÊúâ releases ‰∏≠Êü•Êâæ
          if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  Direct tag lookup failed, searching in all releases..."
            echo "Direct response: $RELEASE_RESPONSE"
            
            ALL_RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            RELEASE_RESPONSE=$(echo "$ALL_RELEASES" | jq ".[] | select(.tag_name == \"${{ github.ref_name }}\")")
            
            if ! echo "$RELEASE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "‚ùå Could not find release for tag ${{ github.ref_name }}"
              echo "Available releases:"
              echo "$ALL_RELEASES" | jq -r '.[] | "- \(.tag_name) (ID: \(.id))"' | head -10
              exit 1
            fi
          fi
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          echo "‚úÖ Found release ID: $RELEASE_ID"
          
          # Ëé∑Âèñ assets
          echo "üìÅ Getting release assets..."
          ASSETS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets)
          
          if ! echo "$ASSETS_RESPONSE" | jq -e '. | length' > /dev/null 2>&1; then
            echo "‚ùå Failed to get assets"
            echo "Response: $ASSETS_RESPONSE"
            exit 1
          fi
          
          echo "üìÅ Current release assets:"
          echo "$ASSETS_RESPONSE" | jq -r '.[] | "- \(.name) (ID: \(.id))"'
          
          # Êü•ÊâæÂπ∂Âà†Èô§‰∏çÈúÄË¶ÅÁöÑÊñá‰ª∂
          echo "üîç Looking for unwanted assets..."
          
          # Âà†Èô§ .yml, .yaml, .blockmap Êñá‰ª∂
          echo "Finding .yml, .yaml, .blockmap files..."
          YML_ASSETS=$(echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select(.name | test("\\.(yml|yaml|blockmap)$")) | .id else empty end' 2>/dev/null || echo "")
          
          # Âà†Èô§‰∏çÂ∏¶Êû∂ÊûÑÊ†áËØÜÁöÑ Windows Êñá‰ª∂  
          echo "Finding Windows files without architecture identifiers..."
          WINDOWS_NO_ARCH_ASSETS=$(echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select(.name | test("windows.*\\.(exe)$") and (.name | test("_(x64|arm64)_") | not)) | .id else empty end' 2>/dev/null || echo "")
          
          # ÂêàÂπ∂ÊâÄÊúâË¶ÅÂà†Èô§ÁöÑ assetsÔºåËøáÊª§Á©∫Ë°å
          ALL_UNWANTED_ASSETS=""
          if [ -n "$YML_ASSETS" ]; then
            ALL_UNWANTED_ASSETS="$YML_ASSETS"
          fi
          if [ -n "$WINDOWS_NO_ARCH_ASSETS" ]; then
            if [ -n "$ALL_UNWANTED_ASSETS" ]; then
              ALL_UNWANTED_ASSETS="$ALL_UNWANTED_ASSETS\n$WINDOWS_NO_ARCH_ASSETS"
            else
              ALL_UNWANTED_ASSETS="$WINDOWS_NO_ARCH_ASSETS"
            fi
          fi
          
          if [ -n "$ALL_UNWANTED_ASSETS" ]; then
            echo "üéØ Found unwanted assets to delete:"
            
            # ÊòæÁ§∫Ë¶ÅÂà†Èô§ÁöÑÊñá‰ª∂ÂàóË°®
            echo "$ASSETS_RESPONSE" | jq -r 'if type == "array" then .[] | select((.name | test("\\.(yml|yaml|blockmap)$")) or (.name | test("windows.*\\.(exe)$") and (.name | test("_(x64|arm64)_") | not))) | "- \(.name) (ID: \(.id))" else empty end' 2>/dev/null || echo "Error displaying file list"
            
            echo -e "$ALL_UNWANTED_ASSETS" | while read -r asset_id; do
              if [ -n "$asset_id" ] && [ "$asset_id" != "null" ] && [ "$asset_id" != "" ]; then
                ASSET_NAME=$(echo "$ASSETS_RESPONSE" | jq -r "if type == \"array\" then .[] | select(.id == $asset_id) | .name else \"unknown\" end" 2>/dev/null)
                echo "üóëÔ∏è  Deleting: $ASSET_NAME (ID: $asset_id)"
                
                DELETE_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null \
                  -X DELETE \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id)
                
                if [ "$DELETE_RESPONSE" = "204" ]; then
                  echo "‚úÖ Successfully deleted: $ASSET_NAME"
                else
                  echo "‚ùå Failed to delete: $ASSET_NAME (HTTP: $DELETE_RESPONSE)"
                fi
              fi
            done
          else
            echo "üéâ No unwanted files found!"
          fi
          
          echo "üèÅ Cleanup completed successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}

  upload-to-cos:
    runs-on: ubuntu-latest
    needs: [cleanup-release]
    if: always() && needs.cleanup-release.result == 'success'
    steps:
      - name: Setup Python for COS upload
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install COS SDK
        run: |
          pip install cos-python-sdk-v5 requests
      
      - name: Upload release assets to COS
        run: |
          cat > upload_to_cos.py << 'EOF'
          import os
          import sys
          import requests
          import json
          from qcloud_cos import CosConfig
          from qcloud_cos import CosS3Client
          from urllib.parse import urlparse
          import time
          
          def main():
              # Ëé∑ÂèñÁéØÂ¢ÉÂèòÈáè
              github_token = os.getenv('GITHUB_TOKEN')
              cos_secret_id = os.getenv('COS_SECRET_ID')
              cos_secret_key = os.getenv('COS_SECRET_KEY')
              bucket = os.getenv('BUCKET')
              region = os.getenv('REGION')
              cdn_url = os.getenv('CDN_URL')
              tag_name = os.getenv('TAG_NAME')
              repository = os.getenv('REPOSITORY')
              
              print(f"üöÄ Starting COS upload for release: {tag_name}")
              
              # ÂàùÂßãÂåñ COS ÂÆ¢Êà∑Á´Ø
              config = CosConfig(Region=region, SecretId=cos_secret_id, SecretKey=cos_secret_key)
              client = CosS3Client(config)
              
              # Ëé∑Âèñ GitHub release ‰ø°ÊÅØ
              release_url = f"https://api.github.com/repos/{repository}/releases/tags/{tag_name}"
              headers = {'Authorization': f'token {github_token}'}
              
              response = requests.get(release_url, headers=headers)
              if response.status_code != 200:
                  print(f"‚ùå Failed to get release info: {response.status_code}")
                  sys.exit(1)
              
              release_data = response.json()
              assets = release_data.get('assets', [])
              
              print(f"üì¶ Found {len(assets)} assets to upload")
              
              # ÂàõÂª∫ÁâàÊú¨ÁõÆÂΩï
              version_path = f"releases/{tag_name.replace('v', '')}"
              
              uploaded_files = []
              
              # ‰∏ä‰º†ÊØè‰∏™ËµÑÊ∫êÊñá‰ª∂
              for asset in assets:
                  asset_name = asset['name']
                  download_url = asset['browser_download_url']
                  
                  print(f"üì• Downloading: {asset_name}")
                  
                  # ‰∏ãËΩΩÊñá‰ª∂
                  asset_response = requests.get(download_url, headers=headers)
                  if asset_response.status_code != 200:
                      print(f"‚ùå Failed to download {asset_name}")
                      continue
                  
                  # ‰∏ä‰º†Âà∞ COS
                  cos_key = f"{version_path}/{asset_name}"
                  
                  try:
                      print(f"‚òÅÔ∏è  Uploading to COS: {cos_key}")
                      
                      client.put_object(
                          Bucket=bucket,
                          Body=asset_response.content,
                          Key=cos_key,
                          ContentType='application/octet-stream'
                      )
                      
                      # ÊûÑÂª∫ CDN URL
                      cdn_file_url = f"{cdn_url.rstrip('/')}/{cos_key}"
                      uploaded_files.append({
                          'name': asset_name,
                          'cos_key': cos_key,
                          'cdn_url': cdn_file_url,
                          'size': len(asset_response.content)
                      })
                      
                      print(f"‚úÖ Successfully uploaded: {asset_name}")
                      print(f"   CDN URL: {cdn_file_url}")
                      
                  except Exception as e:
                      print(f"‚ùå Failed to upload {asset_name}: {str(e)}")
              
              # ÂàõÂª∫Á¥¢ÂºïÊñá‰ª∂
              index_data = {
                  'version': tag_name,
                  'upload_time': int(time.time()),
                  'files': uploaded_files
              }
              
              index_key = f"{version_path}/index.json"
              
              try:
                  client.put_object(
                      Bucket=bucket,
                      Body=json.dumps(index_data, indent=2).encode('utf-8'),
                      Key=index_key,
                      ContentType='application/json'
                  )
                  
                  print(f"üìã Created index file: {cdn_url.rstrip('/')}/{index_key}")
                  
              except Exception as e:
                  print(f"‚ùå Failed to create index file: {str(e)}")
              
              print(f"üéâ COS upload completed! Uploaded {len(uploaded_files)} files")
              print(f"üìÅ Version directory: {cdn_url.rstrip('/')}/{version_path}/")
          
          if __name__ == "__main__":
              main()
          EOF
          
          python upload_to_cos.py
        env:
          GITHUB_TOKEN: ${{ secrets.atriordsa }}
          COS_SECRET_ID: ${{ secrets.COS_SECRET_ID }}
          COS_SECRET_KEY: ${{ secrets.COS_SECRET_KEY }}
          BUCKET: ${{ secrets.BUCKET }}
          REGION: ${{ secrets.REGION }}
          CDN_URL: ${{ secrets.CDN_URL }}
          TAG_NAME: ${{ github.ref_name }}
          REPOSITORY: ${{ github.repository }}
